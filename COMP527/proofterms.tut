annotated proof pair : A => B => A & B =
begin
[ x : A;
  [ y : B;
   (x, y) : A & B ];
 fn y => (x, y) : B => A & B ];
fn x => fn y => (x, y) : A => B => A & B
end;

annotated proof conj_comm : A & B => B & A =
begin
% You cannot do pattern matching when introducing variables, i.e. (x, y) : A & B
[ x : A & B;
  fst x : A;
  snd x : B;
  (snd x, fst x) : B & A ];
fn x => (snd x, fst x) : A & B => B & A
end;

annotated proof disj_comm : A | B => B | A =
begin
[ x : A | B;
  [ a : A;
	inr a : B | A  ];
  [ b : B;
	inl b : B | A  ];
  case x of
  inl a => inr a |
  inr b => inl b
  end : B | A ];
fn x => case x of
inl a => inr a |
inr b => inl b
end : A | B => B | A
end;

% Terms only, tutch can infer the proof tree itself
term disj_comm_tm : A | B => B | A =
fn x =>
case x of
inl a => inr a |
inr b => inl b
end;

annotated proof conj_disj : A & (B | C) => A & B | A & C =
begin
[ x : A & (B | C);
  fst x : A;
  snd x : B | C;
  [ b : B;
	[ c : C;
	  (fst x, c) : A & C ];
	(fst x, b) : A & B;
	inl (fst x, b) : A & B | A & C ];
  [ c : C;
	[ b : B;
	  (fst x, b) : A & B];
	(fst x, c) : A & C;
	inr (fst x, c) : A & B | A & C ];
  case snd x of
  inl b => inl (fst x, b) |
  inr c => inr (fst x, c)
  end : A & B | A & C ];
fn x => case snd x of
inl b => inl (fst x, b) |
inr c => inr (fst x, c)
end : A & (B | C) => A & B | A & C
end;

term conj_disj_tm : A & (B | C) => A & B | A & C =
fn x => case snd x of
inl b => inl (fst x, b) |
inr c => inr (fst x, c)
end;